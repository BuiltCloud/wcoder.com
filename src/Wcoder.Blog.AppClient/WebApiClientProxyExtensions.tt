<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="netstandard.dll" #>
<#@ Assembly Name="System.Net.Http.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="$(TargetDir)\Wcoder.Blog.Protocol.dll" #>
<#@ Assembly Name="$(TargetDir)\Wcoder.Blog.AppClient.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Wcoder.Blog.Protocol.Interfaces" #>
<#@ import namespace="Wcoder.Blog.AppClient" #>

<#@ output extension=".cs" #>
<# 
	var types = Assembly.GetAssembly(typeof(IWcoderBlogService)).GetTypes().Where(t =>t.IsInterface && t.Name.EndsWith("Service")).ToArray();
	var services = new List<Type>();
	foreach (var t in types)
	{
		//MethodInfo[] info = t.GetMethods();//ParameterInfo[] paramInfos = md.GetParameters();
        services.Add(t);//t.GetInterfaces().FirstOrDefault()
    }
	string solutionsPath = Host.ResolveAssemblyReference(@"$(ProjectDir)"); 
#>
using System;
using Wcoder.Blog.AppClient;
using Wcoder.Blog.Protocol.Interfaces;
namespace Microsoft.Extensions.DependencyInjection
{
    public static class WebApiClientProxyExtensions
    {
        public static void AddBlazorHostClientWcoderBlogServices(this IServiceCollection services)
        {
            // Services			
<#
foreach (var service in services) {
	new HttpClientProxy().MkFile(solutionsPath+"\\HttpClient"+service.Name.TrimStart('I')+".cs",new HttpClientProxy().Generate(service));
#>
			services.AddScoped<<#= service.Name#>, <#= "HttpClient"+service.Name.TrimStart('I')#>>();
<#
}
#>
        }
    }
}


<#+ 


#>