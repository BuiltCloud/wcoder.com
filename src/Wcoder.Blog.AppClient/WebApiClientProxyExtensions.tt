<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="netstandard.dll" #>
<#@ Assembly Name="System.Net.Http.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="$(SolutionDir)\src\Wcoder.Blog.Protocol\bin\Debug\netstandard2.0\Wcoder.Blog.Protocol.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net.Http" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="Wcoder.Blog.Protocol.Interfaces" #>

<#@ output extension=".cs" #>
<# 
	var types = Assembly.GetAssembly(typeof(IWcoderBlogService)).GetTypes().Where(t =>t.IsInterface && t.Name.EndsWith("Service")).ToArray();
	var services = new List<Type>();
	foreach (var t in types)
	{
		//MethodInfo[] info = t.GetMethods();//ParameterInfo[] paramInfos = md.GetParameters();
        services.Add(t);//t.GetInterfaces().FirstOrDefault()
    }
	string solutionsPath = Host.ResolveAssemblyReference(@"$(ProjectDir)"); 
#>
using System;
using Wcoder.Blog.AppClient;
using Wcoder.Blog.Protocol.Interfaces;
namespace Microsoft.Extensions.DependencyInjection
{
    public static class WebApiClientProxyExtensions
    {
        public static void AddBlazorHostClientWcoderBlogServices(this IServiceCollection services)
        {
            // Services			
<#
foreach (var service in services) {
	new HttpClientProxy().MkFile(solutionsPath+"\\HttpClient"+service.Name.TrimStart('I')+".cs",new HttpClientProxy().Generate(service));
#>
			services.AddScoped<<#= service.Name#>, <#= "HttpClient"+service.Name.TrimStart('I')#>>();
<#
}
#>
        }
    }
}


<#+ 

public class HttpClientProxy
    {
        public void MkFile(string path, string str)
        {
            System.IO.File.WriteAllText(path, str, Encoding.UTF8);
        }

        public string Generate(Type type)
        {
            if (!type.IsInterface) return string.Empty;
            var controllerName = type.Name.TrimStart('I');
            StringBuilder msb = new StringBuilder();
            var methods = type.GetMethods();
            foreach (var method in methods)
            {
                var httpMethod = HttpMethod.Post;// "PostJsonAsync";
                if (method.ReturnType != typeof(void) && method.ReturnType != typeof(Task))
                {
                    var mName = method.Name.ToLower();
                    var startsWith = new string[] { "get", "find", "search", "list" };
                    var endsWith = new string[] { "list", "detail", "listasync", "detailasync" };
                    if (startsWith.Any(t => mName.StartsWith(t)) || endsWith.Any(t => mName.EndsWith(t)))
                    {
                        httpMethod = HttpMethod.Get;//"GetJsonAsync";
                    }
                }

                var mParameters = method.GetParameters().Select(t => (t.ParameterType.IsGenericType && t.ParameterType.GetGenericTypeDefinition() == typeof(Nullable<>)) ?
                "Nullable<"+t.ParameterType.GetGenericArguments().FirstOrDefault().Name+"> "+t.Name :
                t.ParameterType.Name+" "+t.Name);
                // 返回值类型;
                var returnTypeName = (method.ReturnType == typeof(void) || method.ReturnType == typeof(Task)) ? "" : "<"+method.ReturnType.Name+">";
                if (method.ReturnType.IsGenericType && method.ReturnType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var genType = method.ReturnType.GetGenericArguments().FirstOrDefault();
                    returnTypeName = "<Nullable<"+genType.Name+">>";
                }
                if (method.ReturnType.IsGenericType && method.ReturnType.GetGenericTypeDefinition() == typeof(Task<>))
                {
                    var genType = method.ReturnType.GetGenericArguments().FirstOrDefault();
                    if (genType.IsGenericType && genType.GetGenericTypeDefinition() == typeof(Nullable<>))
                    {
                        genType = genType.GetGenericArguments().FirstOrDefault();
                        returnTypeName = "<Nullable<"+genType.Name+">>";
                    }
                    else
                    {
                        returnTypeName = "<"+genType.Name+">";
                    }
                }
                string ms = @"
        public async Task"+returnTypeName+" "+method.Name+"("+string.Join(",", mParameters)+@")
        {
            var url = $""/{controllerName}/{nameof("+method.Name+@")}"";
            return await httpClient."+(httpMethod == HttpMethod.Get ? "GetJsonAsync" : "PostJsonAsync")+returnTypeName+"(url"+(httpMethod == HttpMethod.Get ? "" : ","+(mParameters.Count()>0?method.GetParameters().First().Name:"null")+"")+@");
        }
";
                msb.Append(ms);
            }
		
            StringBuilder sb = new StringBuilder();
            sb.Append(@"using Microsoft.AspNetCore.Blazor;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using Wcoder.Blog.Protocol.Interfaces;
using Wcoder.Blog.Protocol.Models;

namespace Wcoder.Blog.AppClient
{
    public class HttpClient"+controllerName+@" : I"+controllerName+@"
    {
        private readonly HttpClient httpClient;
        private readonly string controllerName = """+controllerName+@""";

        public HttpClient"+controllerName+@"(HttpClient httpClient)
        {
            this.httpClient = httpClient;
        }

        "+msb.ToString()+@"
     }
}
");
            return sb.ToString();
        }
    }

#>